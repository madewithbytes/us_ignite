# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-09-22 04:13
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import taggit.managers
import us_ignite.common.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('organizations', '0002_auto_20160922_0013'),
    ]

    operations = [
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name=b'name of resource')),
                ('slug', us_ignite.common.fields.AutoUUIDField(blank=True, editable=False, unique=True)),
                ('status', models.IntegerField(choices=[(1, b'Published'), (2, b'Draft'), (3, b'Removed')], default=2)),
                ('url', models.URLField(blank=True, help_text='Please enter a URL starting with http or https', max_length=500, verbose_name='URL')),
                ('description', models.TextField()),
                ('author', models.TextField(blank=True, help_text='Primary Author/Presenter (if different from contact)')),
                ('image', models.ImageField(blank=True, help_text=b'Image suggested size: 500x400px', upload_to=b'resource')),
                ('asset', models.FileField(blank=True, upload_to=b'resource')),
                ('resource_date', models.DateField(blank=True, help_text='Format: YYYY-MM-DD', null=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_homepage', models.BooleanField(default=False, help_text='If marked this element will be shown in the homepage.', verbose_name=b'Show in the homepage?')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True)),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_contact_set', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizations.Organization')),
            ],
            options={
                'ordering': ('-is_featured', '-created'),
            },
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=b'name', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=b'name', unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='resource',
            name='resource_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='resources.ResourceType'),
        ),
        migrations.AddField(
            model_name='resource',
            name='sector',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='resources.Sector'),
        ),
        migrations.AddField(
            model_name='resource',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
